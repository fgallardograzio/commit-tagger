#!/bin/bash


# -------- general --------

parentsFile="$(git rev-parse --git-dir)/commit-tagger.parents"
ignoredFile="$(git rev-parse --git-dir)/commit-tagger.ignored"
parents="$(cat "$parentsFile" 2> /dev/null)"
ignored="$(cat "$ignoredFile" 2> /dev/null)"

function getParent {
  #$1 = branch

  local parent
  parent="$(printf "%s" "$parents" | sed -n "s|^$1:||p" | head -1)"
  if [ -n "$parent" ]; then
    printf "%s" "$parent"
    return 0
  else
    return 1
  fi
}

function isIgnored {
  # $1 = branch

  printf "%s" "$ignored" | grep -q "^$1$"
  return $?
}

function prompt {
  # $1 = message

  while true; do
    printf "%s" "$1"
    read -r promptRes
    case "$promptRes" in
      [yY]|[yY][eE][sS])
        return 0
      ;;
      [nN]|[nN][oO])
        return 1
      ;;
    esac
  done
}

# -------- /general --------


# -------- tag --------

function getTag {
  # $1 = branch

  # printf "%s" "$(printf "%s" $1 | sed "s|.*\/||")"
  printf "%s" "${1##*/}"
  return 0
}

function tag {
  # $1 = branch

  local parent
  local parentExists
  local tags
  local counter
  local tagIgnored
  parent="$(getParent "$1")"
  parentExists=$?
  tagIgnored="$(git config --get commit-tagger.tagignored || printf "true")"
  if  [ "$tagIgnored" != "true" -a "$tagIgnored" != "false" ]; then
    printf "Invalid option found: 'commit-tagger.tagignored=%s'. Allowed values are true (default) and false.\n" "$tagIgnored" >&2
    printf "Please use 'git config commit-tagger.tagignored true|false' to set a valid configuration.\n" >&2
    return 1
  fi
  if ! isIgnored $1 || [ "$tagIgnored" = "true" ]; then
    tags="[$(getTag "$1")]"
    if [ "$parentExists" -eq 0 ]; then
      counter=20
      while [ "$parentExists" -eq 0 ] && ! isIgnored "$parent"; do
        tags="[$(getTag "$parent")]$tags"
        parent="$(getParent "$parent")"
        parentExists=$?
        counter=$(($counter - 1))
        if [ $counter -lt 0 ]; then
          printf "Sorry, there seems to be an error in the branch hierarchy causing an infinite loop.\n" >&2
          return 1
        fi
      done
    fi
    printf "%s\n" "$tags"
    return 0
  fi
}

# -------- /tag --------


# -------- get-parent --------

function get-parent {
  # $1 = branch

  local parent
  parent=$(printf "%s" "$parents" | grep "^$1:" | head -1 | sed "s|^$1:||")
  if [ -n "$parent" ]; then
    printf "The parent of branch \e[1m%s\e[0m is \e[1m%s\e[0m.\n" "$1" "$parent"
    if isIgnored "$1"; then
      printf "Branch \e[1m%s\e[0m is being ignored.\n" "$1"
    fi
    if isIgnored "$parent"; then
      printf "Branch \e[1m%s\e[0m is being ignored.\n" "$parent"
    fi
    return 0
  else
    printf "Branch \e[1m%s\e[0m does not have a parent.\n" "$1"
    if isIgnored "$1"; then
      printf "Branch \e[1m%s\e[0m is being ignored.\n" "$1"
    fi
    return 1
  fi
}

# -------- /get-parent --------


# -------- set-parent --------

function set-parent {
  # $1 = branch, $2 = parentBranch

  local parent
  local counter
  parent="$2"
  counter=20
  if [ "$1" = "$2" ]; then
    printf "Branch \e[1m%s\e[0m cannot be its own parent.\n" "$1" >&2
    return 1
  fi
  while getParent "$parent" > /dev/null; do
    parent="$(getParent "$parent")"
    counter=$(($counter - 1))
    if [ "$parent" = "$1" -o $counter -lt 0 ]; then
      printf "The parent of branch \e[1m%s\e[0m cannot be \e[1m%s\e[0m since that would result in an infinite loop.\n" "$1" "$2" >&2
      return 1
    fi
  done
  if getParent "$1" > /dev/null; then
    sed "s|^$1:.*$|$1:$2|g" "$parentsFile" > "$parentsFile.new" && mv "$parentsFile.new" "$parentsFile"
  else
    printf "%s:%s\n" "$1" "$2" >> "$parentsFile"
  fi
  printf "The parent of branch \e[1m%s\e[0m has been set to \e[1m%s\e[0m.\n" "$1" "$2"
  if isIgnored "$1"; then
    printf "Branch \e[1m%s\e[0m is being ignored.\n" "$1"
  fi
  if isIgnored "$2"; then
    printf "Branch \e[1m%s\e[0m is being ignored.\n" "$2"
  fi
  return 0
}

# -------- /set-parent --------


# -------- remove-parent --------

function remove-parent {
  # $1 = branch

  local parent
  parent="$(getParent "$1")"
  if [ $? -eq 0 ]; then
    parents="$(grep -v "^$1:" "$parentsFile")"
    if [ -n "$parents" ]; then
      printf "%s\n" "$parents" > "$parentsFile"
    else
      printf "" > "$parentsFile"
    fi
    printf "Branch \e[1m%2\e[0m no longer has \e[1m%s\e[0m set as parent.\n" "$1" "$parent"
  else
    printf "There isn't any parent set for branch \e[1m%s\e[0m.\n" "$1"
  fi
  if isIgnored "$1"; then
    printf "Branch \e[1m%s\e[0m is being ignored.\n" "$1"
  fi
  return 0
}

# -------- /remove-parent --------


# -------- ignore --------

function ignore {
  # $@ = list of branches

  local branch
  for branch in "$@"; do
    if ! isIgnored "$branch"; then
      ignored="$ignored\n$branch"
      printf "%s\n" "$branch" >> "$ignoredFile"
      printf "Branch \e[1m%s\e[0m is now being ignored.\n" "$branch"
    else
      printf "Branch \e[1m%s\e[0m is already being ignored.\n" "$branch"
    fi
  done
  return 0
}

# -------- /ignore --------


# -------- unignore --------

function unignore {
  # $@ = list of branches

  local branch
  for branch in "$@"; do
    if isIgnored "$branch"; then
      ignored="$(grep -v "^$branch$" "$ignoredFile")"
      if [ -n "$ignored" ]; then
        printf "%s\n" "$ignored" > "$ignoredFile"
      else
        printf "" > "$ignoredFile"
      fi
      printf "Branch \e[1m%s\e[0m is no longer being ignored.\n" "$branch"
    else
      printf "Branch \e[1m%s\e[0m is not currently beign ignored.\n" "$branch"
    fi
  done
  return 0
}

# -------- /unignore --------


# -------- install-hooks --------

function install-hooks {
  local gitDir
  local hooksDir
  local file
  local fileName
  local replaceFiles
  gitDir="$(git rev-parse --git-dir)"
  hooksDir="$gitDir/hooks"
  printf "Repository's Hooks directory: %s\n\n" "$hooksDir"
  for file in "$HOME/.commit-tagger/hooks"/*; do
    if [ ! -e "$file" ]; then
      printf "Directory '%s' does not exist or does not contain any files.\n" "$HOME/.commit-tagger/hooks" >&2
      printf "Installation aborted.\n"
      exit 1
    fi
    fileName="$(basename "$file")";
    if [ -e "$hooksDir/$fileName" ]; then
      replaceFiles="true"
      printf "File '%s/%s' already exists.\n" "$hooksDir" "$fileName"
    fi
  done
  if [ "$replaceFiles" = "true" ]; then
    printf "\nIf you continue those files will be replaced.\n"
    prompt "Do you wish to continue? [yes or no]: "
    if [ $? != 0 ]; then
      printf "\nInstallation aborted.\n"
      exit 1
    fi
    printf "\n"
  fi
  for file in "$HOME/.commit-tagger/hooks"/*; do
    fileName="$(basename "$file")"
    printf "Installing '%s'...\n" "$fileName"
    if ! cp "$file" "$hooksDir"; then
      printf "There was a problem copying '%s' to '%s'.\n" "$file" "$hooksDir" >&2
      printf "Installation aborted.\n"
      exit 1
    fi
    if ! chmod +x "$hooksDir/$fileName"; then
      printf "There was a problem giving execute permissions to '%s/%s'.\n" "$hooksDir" "$fileName" >&2
      printf "Installation aborted.\n"
      exit 1
    fi
  done
  if [ ! -f "$gitDir/commit-tagger.precommit" ]; then
    printf "Importing pre-commit template.\n"
    if ! cp "$HOME/.commit-tagger/files/commit-tagger.precommit" "$gitDir"; then
      printf "There was a problem copying '%s' to '%s'.\n" "$HOME/.commit-tagger/files/commit-tagger.precommit" "$gitDir" >&2
      printf "Installation aborted.\n"
      exit 1
    fi
  fi
  printf "\nHooks successfully installed.\n"
  return 0
}

# -------- /install-hooks --------


# -------- uninstall-hooks --------

function uninstall-hooks {
  local hooksDir
  local file
  local fileName
  hooksDir="$(git rev-parse --git-dir)/hooks"
  printf "Repository's Hooks directory: %s\n\n" "$hooksDir"
  for file in "$HOME/.commit-tagger/hooks"/*; do
    if [ ! -e "$file" ]; then
      printf "Directory '%s' does not exist or does not contain any files.\n" "$HOME/.commit-tagger/hooks" >&2
      printf "Installation aborted.\n"
      exit 1
    fi
    fileName="$(basename "$file")"
    if [ ! -e "$hooksDir/$fileName" ]; then
      printf "File '%s' not found.\n" "$hooksDir/$fileName" >&2
      continue
    fi
    printf "Removing '%s'...\n" "$fileName"
    if ! rm "$hooksDir/$fileName"; then
      printf "There was a problem removing '%s' from '%s'.\n" "$fileName" "$hooksDir" >&2
      printf "Installation aborted.\n"
      exit 1
    fi
  done
  printf "\nHooks successfully uninstalled.\n"
  return 0
}

# -------- /uninstall-hooks --------


# -------- usage --------

function usage {
  cat <<"EOF"
Usage: git commit-tagger <command> [<args>]

Available commands:
  tag [<branch>]
  get-parent [<branch>]
  set-parent [<branch>] <parent>
  remove-parent [<branch>]
  ignore [<branch> [<branch> ...]]
  unignore [<branch> [<branch> ...]]
  install-hooks
  uninstall-hooks
  help

Commands description:
  tag               Get the full list of tags for <branch>, or the current branch if omitted.
  get-parent        Get the name of the parent of <branch>, or the current branch if omitted.
  set-parent        Specify <parent> as the parent branch of <branch>, or the current branch if omitted.
                    The <parent> branch's tag will be included in the commit messages of <branch>.
  remove-parent     Remove the parent associated to <branch>, or the current branch if omitted.
  ignore            This will result in <branch>, or the current branch if omitted, being ignored.
                    Branches created with <branch> as base won't automatically have <branch> set as parent.
  unignore          No longer ignore <branch>, or the current branch if omitted.
  install-hooks     Install commit-tagger's hooks into the current git repository.
  uninstall-hooks   Remove commit-tagger's hooks from the current git repository.
  help              Show this message.

Configuration:
  git config commit-tagger.<setting> <value>

Available settings:
  hooksenabled      [true|false] Enable all of commit-tagger's hooks in this repository. Default: true.
  checkoutenabled   [true|false] Enable the 'post-checkout' hook. Default true.
  commitmsgenabled  [true|false] Enable the 'prepare-commit-msg' hook to tag messages. Default true.
  precommitenabled  [true|false] Enable the 'pre-commit' hook to test the files to be commited. Default: true.
  precommitverbose  [true|false] Show the output of all the tests. Default: false.
  tagignored        [true|false] Tag commit messages on ignored branches. Default: true.
  confirm           [true|false] Ask for confirmation before actually issuing the commit.
                    Only when -m of -F is used. Default: true
  tagMode           [opt-in|opt-out] Default: opt-out.
                    opt-in: Do not tag commit messages unless prefixed with a "+" symbol.
                    opt-out: Tag all commit messages automatically unless prefixed with a "-" symbol.
EOF
}

# -------- /usage --------


# -------- main --------

function checkArgs {
  # $1 = min, $2 = max, $3 = argc, $4+ = argv

  if [ $3 -lt $1 ]; then
    printf "Missing required arguments for command '%s'.\n" "$4" >&2
    printf "Please run 'git commit-tagger help' to see the list of available commands.\n" >&2
    exit 1
  elif [ $3 -gt $2 ]; then
    printf "Invalid arguments: '%s' for command '%s'.\n" "${@:5}" "$4" >&2
    printf "Please run 'git commit-tagger help' to see the list of available commands.\n" >&2
    exit 1
  fi
}

case "$1" in
  # tag [<branch>]
  "tag")
    checkArgs 1 2 $# $@
    # "${2:-"$(git rev-parse --abbrev-ref HEAD)"}"
    if [ -n "$2" ]; then
      tag "$2"
    else
      tag "$(git rev-parse --abbrev-ref HEAD)"
    fi
  ;;

  # get-parent [<branch>]
  "get-parent")
    checkArgs 1 2 $# $@
    if [ -n "$2" ]; then
      get-parent "$2"
    else
      get-parent "$(git rev-parse --abbrev-ref HEAD)"
    fi
  ;;

  # set-parent [<branch>] <parent>
  "set-parent")
    checkArgs 2 3 $# $@
    if [ -n "$3" ]; then
      set-parent "$2" "$3"
    else
      set-parent "$(git rev-parse --abbrev-ref HEAD)" "$2"
    fi
  ;;

  # remove-parent [<branch>]
  "remove-parent")
    checkArgs 1 2 $# $@
    if [ -n "$2" ]; then
      remove-parent "$2"
    else
      remove-parent "$(git rev-parse --abbrev-ref HEAD)"
    fi
  ;;

  # ignore [<branch> [<branch> ...]]
  "ignore")
    if [ -n "$2" ]; then
      ignore "${@:2}"
    else
      ignore "$(git rev-parse --abbrev-ref HEAD)"
    fi
  ;;

  # unignore [<branch> [<branch> ...]]
  "unignore")
    if [ -n "$2" ]; then
      unignore "${@:2}"
    else
      unignore "$(git rev-parse --abbrev-ref HEAD)"
    fi
  ;;

  # install-hooks
  "install-hooks")
    checkArgs 1 1 $# $@
    install-hooks
  ;;

  # uninstall-hooks
  "uninstall-hooks")
    checkArgs 1 1 $# $@
    uninstall-hooks
  ;;

  # help
  "help")
    checkArgs 1 1 $# $@
    usage
  ;;

  # no command provided
  "")
    usage
    exit 1
  ;;

  # invalid command
  *)
    printf "Invalid command: '%s'.\n" "$1" >&2
    printf "Please run 'git commit-tagger help' to see the list of available commands.\n" >&2
    exit 1
  ;;
esac

# -------- /main --------
