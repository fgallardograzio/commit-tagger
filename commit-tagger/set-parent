#!/bin/bash

# $1 = branch
# $2 = parentBranch

parentsFile="$(git rev-parse --git-dir)/commit-tagger.parents"
ignoredFile="$(git rev-parse --git-dir)/commit-tagger.ignored"
parents="$(cat "$parentsFile" 2> /dev/null)"
ignored="$(cat "$ignoredFile" 2> /dev/null)"

function getParent {
  #$1 = branch
  local parent
  parent="$(printf "$parents" | sed -n "s|^$1:||p" | head -1)"
  if [ -n "$parent" ]; then
    printf "$parent"
    return 0
  else
    return 1
  fi
}

function isIgnored {
  # $1 = branch
  printf "$ignored" | grep -q "^$1$"
  return $?
}

if [ "$1" = "$2" ]; then
  printf "Branch \e[1m$1\e[0m cannot be its own parent.\n" >&2
  exit 1
fi

parent="$2"
counter=20
while getParent "$parent" > /dev/null; do
  parent="$(getParent "$parent")"
  counter=$(($counter - 1))
  if [ "$parent" = "$1" -o $counter -lt 0 ]; then
    printf "The parent of branch \e[1m$1\e[0m cannot be \e[1m$2\e[0m since that would result in an infinite loop.\n" >&2
    exit 1
  fi
done

if getParent "$1" > /dev/null; then
  sed "s|^$1:.*$|$1:$2|g" "$parentsFile" > "$parentsFile.new" && mv "$parentsFile.new" "$parentsFile"
else
  printf "$1:$2\n" >> "$parentsFile"
fi

printf "The parent of branch \e[1m$1\e[0m has been set to \e[1m$2\e[0m.\n"

if isIgnored "$1"; then
  printf "Branch \e[1m$1\e[0m is being ignored.\n"
fi
if isIgnored "$2"; then
  printf "Branch \e[1m$2\e[0m is being ignored.\n"
fi

exit 0
