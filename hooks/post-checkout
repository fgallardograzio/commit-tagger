#!/bin/bash

# $1 = previous head ref, $2 = new head ref, $3 = checkout type (changing branches: 1, file checkout: 0)

prevHEAD="$1"
newHEAD="$2"
checkoutType="$3"
hooksEnabled="$(git config --get commit-tagger.hooksenabled || printf "true")"
checkoutEnabled="$(git config --get commit-tagger.checkoutenabled || printf "true")"

if [ "$hooksEnabled" = "false" ]; then
  exit 0
elif [ "$hooksEnabled" != "true" ]; then
  printf "Invalid option found: commit-tagger.hooksenabled=$hooksEnabled. Allowed values are true (default) and false.\n" >&2
  printf "Please use 'git config commit-tagger.hooksenabled true|false' to set a valid configuration.\n" >&2
  exit 1
fi

if [ "$checkoutEnabled" = "false" ]; then
  exit 0
elif [ "$checkoutEnabled" != "true" ]; then
  printf "Invalid option found: commit-tagger.hooksenabled=$checkoutEnabled. Allowed values are true (default) and false.\n" >&2
  printf "Please use 'git config commit-tagger.hooksenabled true|false' to set a valid configuration.\n" >&2
  exit 1
fi

if [ $checkoutType -eq 1 -a "$prevHEAD" = "$newHEAD" ]; then
  prevBranch="$(git reflog -n 1 | sed "s|^.*moving from \([^ ]\+\) to \([^ ]\+\)$|\1|")"
  currBranch="$(git reflog -n 1 | sed "s|^.*moving from \([^ ]\+\) to \([^ ]\+\)$|\2|")"
  if ! git commit-tagger get-parent "$currBranch" > /dev/null 2>&1 &&
     ! git commit-tagger is-ignored "$currBranch" > /dev/null 2>&1 &&
     ! git commit-tagger is-ignored "$prevBranch" > /dev/null 2>&1; then
    git commit-tagger set-parent "$currBranch" "$prevBranch" 2> /dev/null
    if [ $? != 0 ]; then
      printf "\nError: commit-tagger cannot be found. Please re-install it or remove this hook from your repository.\n" >&2
      printf "You can do so by deleting '%s'.\n" "$(git rev-parse --git-dir)/hooks/post-checkout" >&2
    fi
  fi
fi
