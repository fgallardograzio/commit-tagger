#!/bin/sh

#$1 = filename that contains the message, $2 = source of the commit message

message="$(cat $1)"
branch="$(git rev-parse --abbrev-ref HEAD)"

hooksEnabled="$(git config --get commit-tagger.hooksenabled || printf "true")"
commitmsgEnabled="$(git config --get commit-tagger.commitmsgenabled || printf "true")"
tagIgnored="$(git config --get commit-tagger.tagignored || printf "true")"
confirm="$(git config --get commit-tagger.confirm || printf "true")"
tagMode="$(git config --get commit-tagger.tagmode || printf "opt-out")"

if [ -n "$2" -a "$2" != "message" ]; then
  exit 0
fi

if [ "$hooksEnabled" = "false" ]; then
  exit 0
elif [ "$hooksEnabled" != "true" ]; then
  printf "Invalid option found: commit-tagger.hooksenabled=%s. Allowed values are true (default) and false.\n" "$hooksEnabled" >&2
  printf "Please use 'git config commit-tagger.hooksenabled true|false' to set a valid configuration.\n" >&2
  exit 1
fi

if [ "$commitmsgEnabled" = "false" ]; then
  exit 0
elif [ "$commitmsgEnabled" != "true" ]; then
  printf "Invalid option found: commit-tagger.commitmsgenabled=%s. Allowed values are true (default) and false.\n" "$commitmsgEnabled" >&2
  printf "Please use 'git config commit-tagger.commitmsgenabled true|false' to set a valid configuration.\n" >&2
  exit 1
fi

function prompt {
  # $1 = message

  while true; do
    printf "%s" "$1"
    exec < /dev/tty
    read -r promptRes
    case "$promptRes" in
      [yY]|[yY][eE][sS])
        return 0
      ;;
      [nN]|[nN][oO])
        return 1
      ;;
    esac
  done
}

function tagMessage {
  # $1 = message

  local str
  #str="$(echo "$1" | sed "1 s|^\([^\[].*\)$| \1|")"
  if [ "${1:0:1}" = "[" ]; then
    str="$(git commit-tagger tag 2> /dev/null)$1"
  else
    str="$(git commit-tagger tag 2> /dev/null) $1"
  fi
  if [ $? != 0 ]; then
    printf "\nError: commit-tagger cannot be found. Please re-install it or remove this hook from your repository.\n" >&2
    printf "You can do so by deleting '%s'.\n" "$(git rev-parse --git-dir)/hooks/prepare-commit-msg" >&2
    printf "If you continue with this commit it will not be tagged or affected in any way.\n\n" >&2
    prompt "Do you wish to continue? [yes or no]: " >&2
    exit $(($? + 1))
  fi
  printf "%s" "$str"
  return 0
}

case "$tagMode" in
  "opt-in")
    # if echo "$message" | head -1 | grep -q "^+"; then
    #   message="$(echo "$message" | sed "1 s|^+||")"
    if [ "${message:0:1}" = "+" ]; then
      message="$(tagMessage "${message:1}")" || exit $(($? - 1))
    fi
  ;;

  "opt-out")
    # if echo "$message" | head -1 | grep -q -v "^-"; then
    if [ "${message:0:1}" != "-" ]; then
      message="$(tagMessage "$message")" || exit $(($? - 1))
    else
      # message="$(echo "$message" | sed "1 s|^-||")"
      message="${message:1}"
    fi
  ;;

  *)
    printf "Invalid option found: commit-tagger.tagmode=%s. Allowed values are opt-in and opt-out (default).\n" "$tagMode" >&2
    printf "Please use 'git config commit-tagger.tagmode opt-in|opt-out' to set a valid configuration.\n" >&2
    exit 1
  ;;
esac

if [ "$2" = "message" ]; then
  case "$confirm" in
    "true")
      formatMessage="$(printf "%s" "$message" | sed "s|^|  |")"
      printf "The commit message will be the following:\n\n%s\n\n\n" "$formatMessage"
      prompt "Do you wish to continue? [yes or no]: "
      if [ $? = 0 ]; then
        printf "%s" "$message" > $1
        exit 0
      else
        printf "The commit has been aborted.\n"
        exit 1
      fi
    ;;
    "false")
      printf "%s" "$message" > $1
    ;;
    *)
      printf "Invalid option found: commit-tagger.confirm=%s. Allowed values are true (default) and false.\n" "$confirm" >&2
      printf "Please use 'git config commit-tagger.confirm true|false' to set a valid configuration.\n" >&2
      exit 1
    ;;
  esac
else
  printf "%s" "$message" > $1
  exit 0
fi
